// src/app/api/search/suggestions/route.ts - –ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
import { NextRequest } from 'next/server';
import { 
  searchProducts, 
  fetchBrands,
  fetchCategories,
  fetchModels,
  getFullImageUrl
} from '../../../../services/api';
import { formatApiProduct } from '../../../../utils/apiHelpers';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const query = searchParams.get('q') || '';
    const limit = parseInt(searchParams.get('limit') || '8');
    
    console.log('üîç [Suggestions API] –ó–∞–ø—Ä–æ—Å:', query, '–ª–∏–º–∏—Ç:', limit);
    
    if (!query.trim()) {
      return Response.json({
        products: [],
        brands: [],
        categories: [],
        total: 0
      });
    }
    
    const results = {
      products: [],
      brands: [],
      categories: [],
      total: 0
    };
    
    try {
      // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      console.log('üîÑ [Suggestions] –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã...');
      const productsData = await searchProducts(query, {});
      
      if (productsData && productsData.length > 0) {
        console.log(`üì¶ [Suggestions] –ù–∞–π–¥–µ–Ω–æ ${productsData.length} —Ç–æ–≤–∞—Ä–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4...`);
        
        // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –º–æ–¥–µ–ª—è–º–∏
        const processedProducts = [];
        
        for (let i = 0; i < Math.min(4, productsData.length); i++) {
          const product = productsData[i];
          
          try {
            console.log(`üé® [Suggestions] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä ${i + 1}: ${product.Name} (${product.slug})`);
            
            // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const models = await fetchModels(product.slug);
            console.log(`üñºÔ∏è [Suggestions] –ù–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π –¥–ª—è ${product.slug}`);
            
            if (models.length > 0) {
              // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º formatApiProduct –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
              const formatted = await formatApiProduct(product, models);
              
              const result = {
                slug: formatted.slug,
                Name: formatted.Name,
                brandName: formatted.brandName,
                Price: formatted.Price,
                imageUrl: formatted.imageUrl, // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –º–æ–¥–µ–ª–∏!
                categoryName: formatted.categoryNames[0] || product.category?.Name
              };
              
              console.log(`‚úÖ [Suggestions] –¢–æ–≤–∞—Ä ${product.slug} –æ–±—Ä–∞–±–æ—Ç–∞–Ω:`);
              console.log(`   - –ù–∞–∑–≤–∞–Ω–∏–µ: ${result.Name}`);
              console.log(`   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${result.imageUrl}`);
              console.log(`   - –†–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${result.imageUrl && !result.imageUrl.includes('placehold') ? '–î–ê' : '–ù–ï–¢'}`);
              
              processedProducts.push(result);
            } else {
              console.log(`‚ö†Ô∏è [Suggestions] –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è ${product.slug}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
              
              // Fallback –±–µ–∑ –º–æ–¥–µ–ª–µ–π
              processedProducts.push({
                slug: product.slug,
                Name: product.Name,
                brandName: product.brand?.Brand_Name || 'Unknown',
                Price: product.Price,
                imageUrl: getFullImageUrl(product.Image?.url),
                categoryName: product.category?.Name
              });
            }
            
          } catch (error) {
            console.error(`‚ùå [Suggestions] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${product.slug}:`, error);
            
            // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
            processedProducts.push({
              slug: product.slug || `product-${Date.now()}`,
              Name: product.Name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
              brandName: product.brand?.Brand_Name || 'Unknown',
              Price: product.Price || 0,
              imageUrl: getFullImageUrl(product.Image?.url),
              categoryName: product.category?.Name || null
            });
          }
        }
        
        results.products = processedProducts as any[];
        console.log(`‚úÖ [Suggestions] –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
      }
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–µ–Ω–¥—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const [brandsData, categoriesData] = await Promise.allSettled([
        fetchBrands().then(brands => 
          brands.filter((brand: { Brand_Name: string; }) => 
            brand.Brand_Name && brand.Brand_Name.toLowerCase().includes(query.toLowerCase())
          ).map((brand: { Brand_Name: any; }) => brand.Brand_Name)
        ),
        
        fetchCategories().then(categories =>
          categories.filter(category =>
            category.Name && (
              category.Name.toLowerCase().includes(query.toLowerCase()) ||
              (category.NameEngl && category.NameEngl.toLowerCase().includes(query.toLowerCase()))
            )
          ).map(category => category.Name)
        )
      ]);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã
      if (brandsData.status === 'fulfilled') {
        results.brands = brandsData.value.slice(0, 3) as any[];
        console.log(`üè∑Ô∏è [Suggestions] –ù–∞–π–¥–µ–Ω–æ –±—Ä–µ–Ω–¥–æ–≤: ${results.brands.length}`);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏  
      if (categoriesData.status === 'fulfilled') {
        results.categories = categoriesData.value.slice(0, 3) as any[];
        console.log(`üìÇ [Suggestions] –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${results.categories.length}`);
      }
      
    } catch (error) {
      console.error('‚ùå [Suggestions] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const smartSuggestions = generateSmartSuggestions(query);
    results.brands = [...new Set([...results.brands, ...smartSuggestions.brands])].slice(0, 3) as any[];
    results.categories = [...new Set([...results.categories, ...smartSuggestions.categories])].slice(0, 3) as any[];
    
    results.total = results.products.length + results.brands.length + results.categories.length;
    
    console.log('üéØ [Suggestions API] –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:', {
      products: results.products.length,
      brands: results.brands.length,
      categories: results.categories.length,
      total: results.total,
      firstProductImage: results.products[0]?.imageUrl,
      productsWithRealImages: results.products.filter(p => p.imageUrl && !p.imageUrl.includes('placehold')).length
    });
    
    return Response.json(results);
    
  } catch (error) {
    console.error('‚ùå [Suggestions API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return Response.json(
      { 
        error: 'Failed to fetch suggestions',
        products: [],
        brands: [],
        categories: [],
        total: 0
      },
      { status: 500 }
    );
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
 */
function generateSmartSuggestions(query: string) {
  const queryLower = query.toLowerCase();
  const suggestions = {
    brands: [] as string[],
    categories: [] as string[]
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
  const keywords = [
    { word: '–±–µ–≥', brands: ['Nike', 'Adidas', 'New Balance'], categories: ['–ë–µ–≥–æ–≤—ã–µ'] },
    { word: '–±–∞—Å–∫–µ—Ç', brands: ['Nike', 'Jordan', 'Adidas'], categories: ['–ë–∞—Å–∫–µ—Ç–±–æ–ª—å–Ω—ã–µ'] },
    { word: '—Ñ—É—Ç–±–æ–ª', brands: ['Nike', 'Adidas', 'Puma'], categories: ['–§—É—Ç–±–æ–ª—å–Ω—ã–µ'] },
    { word: '—Ç—Ä–µ–Ω–∏—Ä', brands: ['Nike', 'Adidas', 'Under Armour'], categories: ['–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ'] },
    { word: '–∂–µ–Ω—Å–∫', brands: [], categories: ['–ñ–µ–Ω—Å–∫–∏–µ'] },
    { word: '–º—É–∂—Å–∫', brands: [], categories: ['–ú—É–∂—Å–∫–∏–µ'] },
    { word: '–¥–µ—Ç—Å–∫', brands: [], categories: ['–î–µ—Ç—Å–∫–∏–µ'] }
  ];
  
  // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  keywords.forEach(keyword => {
    if (queryLower.includes(keyword.word)) {
      suggestions.brands.push(...keyword.brands);
      suggestions.categories.push(...keyword.categories);
    }
  });
  
  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
  const competitors: Record<string, string[]> = {
    'nike': ['Adidas', 'Jordan', 'Puma'],
    'adidas': ['Nike', 'Puma', 'New Balance'],
    'jordan': ['Nike', 'Adidas'],
    'puma': ['Nike', 'Adidas'],
    'new balance': ['Nike', 'Adidas', 'ASICS']
  };
  
  Object.keys(competitors).forEach(brand => {
    if (queryLower.includes(brand)) {
      suggestions.brands.push(...competitors[brand]);
    }
  });
  
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  suggestions.brands = [...new Set(suggestions.brands)];
  suggestions.categories = [...new Set(suggestions.categories)];
  
  return suggestions;
}