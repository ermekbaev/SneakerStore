// src/app/api/products/route.ts
import { NextRequest } from 'next/server';
import { 
  fetchProducts, 
  searchProducts, 
  fetchModels, 
  getFullImageUrl, 
  type Product 
} from '../../../services/api';
import { formatApiProduct } from '../../../utils/apiHelpers';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get('limit') || '25');
    const featured = searchParams.get('featured');
    const category = searchParams.get('category');
    const brand = searchParams.get('brand');
    const search = searchParams.get('q');
    const minPrice = searchParams.get('minPrice');
    const maxPrice = searchParams.get('maxPrice');
    const refresh = searchParams.get('refresh'); // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞
    
    console.log('üöÄ Products API route - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
      limit, featured, category, brand, search, minPrice, maxPrice, refresh
    });
    
    let products: Product[] = [];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º searchProducts
    if (search || category || brand || minPrice || maxPrice) {
      const filters = {
        categories: category ? [category] : undefined,
        brands: brand ? [brand] : undefined,
        minPrice: minPrice ? parseInt(minPrice) : undefined,
        maxPrice: maxPrice ? parseInt(maxPrice) : undefined,
      };
      
      console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:', filters);
      products = await searchProducts(search || '', filters);
    } else {
      // –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã');
      products = await fetchProducts();
    }
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ API`);
    
    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è featured —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
    if (featured === 'true') {
      console.log('‚≠ê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–¥–±–æ—Ä–∫—É featured —Ç–æ–≤–∞—Ä–æ–≤');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
      const timestamp = Date.now();
      console.log(`üïí –ó–∞–ø—Ä–æ—Å –≤ ${timestamp}`);
      
      // –ü–æ–ª–Ω–∞—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
      const shuffled = [...products].sort(() => Math.random() - 0.5);
      
      // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
      const segments = {
        expensive: shuffled.filter(p => p.Price > 10000),
        midRange: shuffled.filter(p => p.Price >= 5000 && p.Price <= 10000),
        affordable: shuffled.filter(p => p.Price < 5000),
        popular: shuffled.filter(p => 
          p.Name.toLowerCase().includes('nike') || 
          p.Name.toLowerCase().includes('adidas') ||
          p.Name.toLowerCase().includes('jordan') ||
          p.Name.toLowerCase().includes('puma')
        )
      };
      
      // –°–æ–±–∏—Ä–∞–µ–º –º–∏–∫—Å –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
      const featuredSelection = [
        ...segments.expensive.slice(0, 2),
        ...segments.popular.slice(0, 3), 
        ...segments.midRange.slice(0, 2),
        ...segments.affordable.slice(0, 1)
      ].filter((item, index, arr) => 
        // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        arr.findIndex(p => p.slug === item.slug) === index
      );
      
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
      if (featuredSelection.length < limit) {
        const remaining = shuffled.filter(p => 
          !featuredSelection.find(f => f.slug === p.slug)
        );
        featuredSelection.push(...remaining.slice(0, limit - featuredSelection.length));
      }
      
      // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ
      products = featuredSelection
        .sort(() => Math.random() - 0.5)
        .slice(0, limit);
        
      console.log(`‚≠ê –í—ã–±—Ä–∞–Ω–æ ${products.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö featured —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log('üìã –¢–æ–≤–∞—Ä—ã:', products.map(p => `${p.Name} (${p.Price}‚ÇΩ)`));
    } else {
      // –û–≥—Ä–∞–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      products = products.slice(0, limit);
    }
    
    console.log(`üìè –ò—Ç–æ–≥–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    
    // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú formatApiProduct –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å formatApiProduct...');
    
    const transformedProducts = await Promise.all(
      products.map(async (product, index) => {
        console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç ${index + 1}/${products.length}: ${product.Name}`);
        
        try {
          // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
          const models = await fetchModels(product.slug);
          console.log(`üé® –î–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.slug} –Ω–∞–π–¥–µ–Ω–æ ${models.length} –º–æ–¥–µ–ª–µ–π`);
          
          // ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –º–æ–¥–µ–ª—è–º–∏
          const formatted = await formatApiProduct(product, models);
          console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç ${product.slug} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω`);
          
          // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
          const result = {
            slug: formatted.slug,
            Name: formatted.Name,
            brandName: formatted.brandName,
            Price: formatted.Price,
            imageUrl: formatted.imageUrl, // ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            colors: formatted.colors, // ‚úÖ –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
            sizes: formatted.sizes, // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            genders: formatted.genders,
            categoryName: formatted.categoryNames[0] || product.category?.Name || null,
            description: formatted.Description,
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è UI
            originalPrice: undefined,
            isNew: false,
            isSale: false,
            rating: 4.0 + Math.random(),
          };
          
          return result;
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.slug}:`, error);
          
          // ‚úÖ Fallback –≤–µ—Ä—Å–∏—è –µ—Å–ª–∏ formatApiProduct –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
          const fallback = {
            slug: product.slug,
            Name: product.Name,
            brandName: product.brand?.Brand_Name || 'Unknown',
            Price: product.Price,
            imageUrl: getFullImageUrl(product.Image?.url),
            colors: product.colors?.map(color => color.Name).filter(Boolean) || ['–ß–µ—Ä–Ω—ã–π'],
            sizes: product.sizes?.map(size => size.Size) || [42],
            genders: product.genders?.map(gender => gender.Geander_Name).filter(Boolean) || [],
            categoryName: product.category?.Name || null,
            description: product.Description || '',
            originalPrice: undefined,
            isNew: false,
            isSale: false,
            rating: 4.0 + Math.random(),
          };
          
          console.log(`‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.slug}`);
          return fallback;
        }
      })
    );
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ API route');
    
    return Response.json({
      products: transformedProducts,
      total: products.length,
      page: 1,
      limit,
    });
    
  } catch (error) {
    console.error('‚ùå Products API Error:', error);
    return Response.json(
      { 
        error: 'Failed to fetch products',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}