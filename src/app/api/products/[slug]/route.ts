// üìÅ src/app/api/products/[slug]/route.ts
import { NextRequest } from 'next/server';
import { fetchProductById, fetchModels } from '../../../../services/api';
import { formatApiProduct } from '../../../../utils/apiHelpers';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    const { slug } = await params;
    
    console.log('üîç [Product API] –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å slug:', slug);
    
    const response = await fetchProductById(slug);
    
    if (!response.data || response.data.length === 0) {
      console.log('‚ùå [Product API] –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return Response.json(
        { error: 'Product not found' },
        { status: 404 }
      );
    }
    
    const productData = response.data[0];
    console.log('‚úÖ [Product API] –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:', productData.Name);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ü–≤–µ—Ç–æ–≤
    console.log('üé® [Product API] –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏...');
    const models = await fetchModels(productData.slug);
    console.log('üé® [Product API] –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π:', models.length);
    
    // ‚úÖ –õ–û–ì–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò –¶–í–ï–¢–û–í
    console.log('üé® [Product API] –¶–≤–µ—Ç–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π:', models.map(m => ({
      id: m.colors?.id,
      name: m.colors?.Name,
      colorCode: m.colors?.colorCode,
      hasColorCode: !!m.colors?.colorCode
    })));
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç
    const formattedProduct = await formatApiProduct(productData, models);
    
    // –°–æ–∑–¥–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
    const gallery = formattedProduct.imageUrls.map((url, index) => ({
      url,
      alt: `${formattedProduct.Name} - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`,
      formats: {
        small: url,
        medium: url,
        large: url,
      }
    }));
    
    // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –¶–í–ï–¢–ê –ò–ó –ú–û–î–ï–õ–ï–ô
    let finalColors = [];
    
    if (models && models.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π (—Å colorCode)
      const modelColors = models
        .filter(model => model.colors && model.colors.Name) // –¢–æ–ª—å–∫–æ –º–æ–¥–µ–ª–∏ —Å —Ü–≤–µ—Ç–∞–º–∏
        .map(model => ({
          id: model.colors.id || Math.random(),
          name: model.colors.Name,
          colorCode: model.colors.colorCode || undefined // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º colorCode!
        }))
        .filter((color, index, self) => 
          // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
          index === self.findIndex(c => c.name === color.name)
        );
      
      console.log('üé® [Product API] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π:', modelColors);
      finalColors = modelColors;
    }
    
    // –ï—Å–ª–∏ —Ü–≤–µ—Ç–æ–≤ –∏–∑ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    if (finalColors.length === 0 && productData.colors) {
      finalColors = productData.colors.map(color => ({
        id: color.id || Math.random(),
        name: color.Name,
        colorCode: color.colorCode || undefined // ‚úÖ –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º!
      }));
      
      console.log('üé® [Product API] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:', finalColors);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç —Ü–≤–µ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º fallback
    if (finalColors.length === 0) {
      finalColors = [
        { id: 1, name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', colorCode: undefined }
      ];
      
      console.log('üé® [Product API] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ü–≤–µ—Ç');
    }
    
    const product = {
      slug: formattedProduct.slug,
      Name: formattedProduct.Name,
      brandName: formattedProduct.brandName,
      Price: formattedProduct.Price,
      imageUrl: formattedProduct.imageUrl,
      gallery: gallery.length > 0 ? gallery : [
        {
          url: formattedProduct.imageUrl,
          alt: formattedProduct.Name,
          formats: {
            small: formattedProduct.imageUrl,
            medium: formattedProduct.imageUrl,
            large: formattedProduct.imageUrl,
          }
        }
      ],
      colors: finalColors, // ‚úÖ –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ colorCode!
      sizes: formattedProduct.sizes.map((size, index) => ({
        id: index + 1,
        value: size.toString(),
        available: true,
      })),
      genders: formattedProduct.genders,
      categoryName: formattedProduct.categoryNames[0] || '–ö—Ä–æ—Å—Å–æ–≤–∫–∏',
      description: formattedProduct.Description || '–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ.',
      features: [],
      models: [],
      originalPrice: undefined,
      isNew: false,
      isSale: false,
      featured: false,
      rating: 4.0 + Math.random(),
      reviewsCount: Math.floor(Math.random() * 100),
      stock: Math.floor(Math.random() * 50) + 10,
    };
    
    console.log('üéØ [Product API] –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞:', product.colors);
    
    return Response.json({ product });
    
  } catch (error) {
    console.error('üí• [Product API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    
    return Response.json(
      { 
        error: 'Failed to fetch product',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}