// src/contexts/CartContext.tsx
'use client';

import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export interface CartItem {
  id: string;
  productSlug: string;
  name: string;
  price: number;
  imageUrl: string;
  color: { id: number; name: string };
  size: number;
  quantity: number;
}

export interface CartSummary {
  subtotal: number;
  shipping: number;
  total: number;
  itemCount: number;
}

interface CartContextType {
  cartItems: CartItem[];
  loading: boolean;
  error: string | null;
  addToCart: (
    product: { slug: string; Name: string; Price: number; imageUrl: string },
    color: { id: number; Name: string },
    size: number
  ) => Promise<boolean>;
  removeFromCart: (itemId: string) => void;
  updateQuantity: (itemId: string, quantity: number) => void;
  calculateSummary: () => CartSummary;
  clearCart: () => Promise<boolean>;
  loadCart: () => void;
  isInCart: (productSlug: string, colorId: number, size: number) => boolean;
  getItemQuantity: (productSlug: string, colorId: number, size: number) => number;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: ReactNode }) {
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    console.log('üõí CartProvider: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã');
    loadCart();
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    if (!loading && typeof window !== 'undefined') {
      try {
        console.log('üíæ CartProvider: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage:', cartItems.length, '—Ç–æ–≤–∞—Ä–æ–≤');
        localStorage.setItem('cart', JSON.stringify(cartItems));
      } catch (err) {
        console.error('‚ùå CartProvider: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', err);
      }
    }
  }, [cartItems, loading]);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage
  const loadCart = useCallback(() => {
    console.log('üìÇ CartProvider: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage');
    
    try {
      setLoading(true);
      
      if (typeof window !== 'undefined') {
        const storedCart = localStorage.getItem('cart');
        console.log('üìã CartProvider: –î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:', storedCart ? '–Ω–∞–π–¥–µ–Ω—ã' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        
        if (storedCart) {
          const parsedCart = JSON.parse(storedCart);
          
          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
          if (Array.isArray(parsedCart)) {
            setCartItems(parsedCart);
            console.log('‚úÖ CartProvider: –ö–æ—Ä–∑–∏–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–æ–≤–∞—Ä–æ–≤:', parsedCart.length);
          } else {
            console.warn('‚ö†Ô∏è CartProvider: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage');
            setCartItems([]);
          }
        } else {
          console.log('üì≠ CartProvider: –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –≤ localStorage');
          setCartItems([]);
        }
      }
      
      setError(null);
    } catch (err) {
      console.error('‚ùå CartProvider: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É');
      setCartItems([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addToCart = useCallback(async (
    product: { slug: string; Name: string; Price: number; imageUrl: string },
    color: { id: number; Name: string },
    size: number
  ): Promise<boolean> => {
    console.log('üõí CartProvider: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É:', product.slug);
    
    try {
      const itemId = `${product.slug}-${color.id}-${size}`;
      console.log('üîó CartProvider: ID —Ç–æ–≤–∞—Ä–∞:', itemId);
      
      setCartItems(prevItems => {
        console.log('üìã CartProvider: –¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:', prevItems.length);
        
        const existingItemIndex = prevItems.findIndex(item => item.id === itemId);
        
        if (existingItemIndex !== -1) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
          console.log('‚ûï CartProvider: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞');
          const updatedItems = [...prevItems];
          updatedItems[existingItemIndex] = {
            ...updatedItems[existingItemIndex],
            quantity: updatedItems[existingItemIndex].quantity + 1
          };
          return updatedItems;
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
          console.log('üÜï CartProvider: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä');
          const newItem: CartItem = {
            id: itemId,
            productSlug: product.slug,
            name: product.Name,
            price: product.Price,
            imageUrl: product.imageUrl,
            color: { id: color.id, name: color.Name },
            size,
            quantity: 1
          };
          
          const newItems = [...prevItems, newItem];
          console.log('‚úÖ CartProvider: –ù–æ–≤–∞—è –∫–æ—Ä–∑–∏–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤:', newItems.length);
          return newItems;
        }
      });
      
      setError(null);
      console.log('üéâ CartProvider: –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
      return true;
    } catch (err) {
      console.error('üí• CartProvider: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É');
      return false;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
  const removeFromCart = useCallback((itemId: string) => {
    console.log('üóëÔ∏è CartProvider: –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä:', itemId);
    setCartItems(prevItems => {
      const filteredItems = prevItems.filter(item => item.id !== itemId);
      console.log('‚úÖ CartProvider: –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤:', filteredItems.length);
      return filteredItems;
    });
    setError(null);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
  const updateQuantity = useCallback((itemId: string, quantity: number) => {
    console.log('üîÑ CartProvider: –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:', itemId, '–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', quantity);
    
    if (quantity <= 0) {
      removeFromCart(itemId);
      return;
    }
    
    setCartItems(prevItems => 
      prevItems.map(item => 
        item.id === itemId 
          ? { ...item, quantity }
          : item
      )
    );
    setError(null);
  }, [removeFromCart]);

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
  const calculateSummary = useCallback((): CartSummary => {
    const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
    const itemCount = cartItems.reduce((total, item) => total + item.quantity, 0);
    
    // –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 5000 —Ä—É–±–ª–µ–π)
    const shipping = subtotal >= 5000 ? 0 : 500;
    const total = subtotal + shipping;
    
    return {
      subtotal,
      shipping,
      total,
      itemCount
    };
  }, [cartItems]);

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
  const clearCart = useCallback(async (): Promise<boolean> => {
    console.log('üßπ CartProvider: –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É');
    try {
      setCartItems([]);
      setError(null);
      return true;
    } catch (err) {
      console.error('‚ùå CartProvider: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É');
      return false;
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const isInCart = useCallback((productSlug: string, colorId: number, size: number): boolean => {
    const itemId = `${productSlug}-${colorId}-${size}`;
    return cartItems.some(item => item.id === itemId);
  }, [cartItems]);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const getItemQuantity = useCallback((productSlug: string, colorId: number, size: number): number => {
    const itemId = `${productSlug}-${colorId}-${size}`;
    const item = cartItems.find(item => item.id === itemId);
    return item ? item.quantity : 0;
  }, [cartItems]);

  const value: CartContextType = {
    cartItems,
    loading,
    error,
    addToCart,
    removeFromCart,
    updateQuantity,
    calculateSummary,
    clearCart,
    loadCart,
    isInCart,
    getItemQuantity,
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
export function useCart() {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
}

export default useCart;